openapi: 3.0.1
info:
  title: QrTagger
  version: v1
paths:
  /Api/Auth/Register:
    post:
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /Api/Auth/Login:
    post:
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /Api/Auth/User:
    get:
      tags:
        - Auth
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
  /Api/Auth/Logout:
    delete:
      tags:
        - Auth
      responses:
        '204':
          description: No Content
  /Api/ItemTags:
    get:
      tags:
        - ItemTags
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IndexItemTagsResponse'
    post:
      tags:
        - ItemTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateItemTagRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateItemTagRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateItemTagRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateItemTagResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/Api/ItemTags/{token}':
    get:
      tags:
        - ItemTags
      parameters:
        - name: token
          in: path
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewItemTagResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/Api/ItemTags/{id}':
    put:
      tags:
        - ItemTags
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateItemTagRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateItemTagRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateItemTagRequest'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - ItemTags
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
components:
  schemas:
    CreateItemTagRequest:
      required:
        - description
        - fieldGroups
        - name
      type: object
      properties:
        name:
          maxLength: 256
          minLength: 1
          type: string
        description:
          maxLength: 2024
          minLength: 1
          type: string
        fieldGroups:
          type: array
          items:
            $ref: '#/components/schemas/ItemTagFieldGroup'
      additionalProperties: false
    CreateItemTagResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        token:
          type: string
          nullable: true
        fieldGroups:
          type: array
          items:
            $ref: '#/components/schemas/ItemTagFieldGroup'
          nullable: true
      additionalProperties: false
    IndexItemTagsResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        token:
          type: string
          nullable: true
      additionalProperties: false
    ItemTagField:
      required:
        - name
        - value
      type: object
      properties:
        name:
          minLength: 1
          type: string
        value:
          minLength: 1
          type: string
      additionalProperties: false
    ItemTagFieldGroup:
      required:
        - fields
        - language
      type: object
      properties:
        language:
          minLength: 1
          type: string
        fields:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/ItemTagField'
      additionalProperties: false
    LoginRequest:
      required:
        - email
        - password
      type: object
      properties:
        email:
          minLength: 1
          type: string
        password:
          minLength: 1
          type: string
      additionalProperties: false
    LoginResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/LoginResponseUser'
      additionalProperties: false
    LoginResponseUser:
      type: object
      properties:
        id:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        userName:
          type: string
          nullable: true
      additionalProperties: false
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: { }
    RegisterRequest:
      required:
        - confirmPassword
        - email
        - password
        - userName
      type: object
      properties:
        email:
          minLength: 1
          type: string
        userName:
          minLength: 1
          type: string
        password:
          minLength: 1
          type: string
        confirmPassword:
          minLength: 1
          type: string
      additionalProperties: false
    UpdateItemTagRequest:
      required:
        - description
        - fieldGroups
        - name
      type: object
      properties:
        name:
          maxLength: 256
          minLength: 1
          type: string
        description:
          maxLength: 2024
          minLength: 1
          type: string
        fieldGroups:
          type: array
          items:
            $ref: '#/components/schemas/ItemTagFieldGroup'
      additionalProperties: false
    UserResponse:
      type: object
      properties:
        id:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        userName:
          type: string
          nullable: true
      additionalProperties: false
    ViewItemTagResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        token:
          type: string
          nullable: true
        qrCode:
          type: string
          nullable: true
        fieldGroups:
          type: array
          items:
            $ref: '#/components/schemas/ItemTagFieldGroup'
          nullable: true
      additionalProperties: false