/**
 * Generated by orval v6.11.0 🍺
 * Do not edit manually.
 * QrTagger
 * OpenAPI spec version: v1
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  WeatherForecast
} from '.././model'
import { useCustomClient } from '.././customClient';
import type { ErrorType } from '.././customClient';


export const useGetWeatherForecastHook = () => {
        const getWeatherForecast = useCustomClient<WeatherForecast[]>();

        return (
    
 signal?: AbortSignal
) => {
        return getWeatherForecast(
          {url: `/WeatherForecast`, method: 'get', signal
    },
          );
        }
      }
    

export const getGetWeatherForecastQueryKey = () => [`/WeatherForecast`];

    
export type GetWeatherForecastQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetWeatherForecastHook>>>>
export type GetWeatherForecastQueryError = ErrorType<unknown>

export const useGetWeatherForecast = <TData = Awaited<ReturnType<ReturnType<typeof useGetWeatherForecastHook>>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetWeatherForecastHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWeatherForecastQueryKey();

  const getWeatherForecast =  useGetWeatherForecastHook();


  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetWeatherForecastHook>>>> = ({ signal }) => getWeatherForecast(signal);


  

  const query = useQuery<Awaited<ReturnType<ReturnType<typeof useGetWeatherForecastHook>>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

