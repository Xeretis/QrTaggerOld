/**
 * Generated by orval v6.11.0 🍺
 * Do not edit manually.
 * QrTagger
 * OpenAPI spec version: v1
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  ItemTagsIndexResponse
} from '.././model'
import { useCustomClient } from '.././customClient';
import type { ErrorType } from '.././customClient';


export const useGetApiItemTagsHook = () => {
        const getApiItemTags = useCustomClient<ItemTagsIndexResponse[]>();

        return (
    
 signal?: AbortSignal
) => {
        return getApiItemTags(
          {url: `/Api/ItemTags`, method: 'get', signal
    },
          );
        }
      }
    

export const getGetApiItemTagsQueryKey = () => [`/Api/ItemTags`];

    
export type GetApiItemTagsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiItemTagsHook>>>>
export type GetApiItemTagsQueryError = ErrorType<unknown>

export const useGetApiItemTags = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiItemTagsHook>>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiItemTagsHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiItemTagsQueryKey();

  const getApiItemTags =  useGetApiItemTagsHook();


  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiItemTagsHook>>>> = ({ signal }) => getApiItemTags(signal);


  

  const query = useQuery<Awaited<ReturnType<ReturnType<typeof useGetApiItemTagsHook>>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

