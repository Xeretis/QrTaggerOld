/**
 * Generated by orval v6.11.0 🍺
 * Do not edit manually.
 * QrTagger
 * OpenAPI spec version: v1
 */
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  ProblemDetails,
  RegisterRequest,
  LoginResponse,
  LoginRequest,
  UserResponse
} from '.././model'
import { useCustomClient } from '.././customClient';
import type { ErrorType, BodyType } from '.././customClient';


export const usePostApiAuthRegisterHook = () => {
        const postApiAuthRegister = useCustomClient<void>();

        return (
    registerRequest: BodyType<RegisterRequest>,
 ) => {
        return postApiAuthRegister(
          {url: `/Api/Auth/Register`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: registerRequest
    },
          );
        }
      }
    


    export type PostApiAuthRegisterMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiAuthRegisterHook>>>>
    export type PostApiAuthRegisterMutationBody = BodyType<RegisterRequest>
    export type PostApiAuthRegisterMutationError = ErrorType<ProblemDetails>

    export const usePostApiAuthRegister = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiAuthRegisterHook>>>, TError,{data: BodyType<RegisterRequest>}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      const postApiAuthRegister =  usePostApiAuthRegisterHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiAuthRegisterHook>>>, {data: BodyType<RegisterRequest>}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthRegister(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof postApiAuthRegister>>, TError, {data: BodyType<RegisterRequest>}, TContext>(mutationFn, mutationOptions);
    }
    export const usePostApiAuthLoginHook = () => {
        const postApiAuthLogin = useCustomClient<LoginResponse>();

        return (
    loginRequest: BodyType<LoginRequest>,
 ) => {
        return postApiAuthLogin(
          {url: `/Api/Auth/Login`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: loginRequest
    },
          );
        }
      }
    


    export type PostApiAuthLoginMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiAuthLoginHook>>>>
    export type PostApiAuthLoginMutationBody = BodyType<LoginRequest>
    export type PostApiAuthLoginMutationError = ErrorType<ProblemDetails>

    export const usePostApiAuthLogin = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiAuthLoginHook>>>, TError,{data: BodyType<LoginRequest>}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      const postApiAuthLogin =  usePostApiAuthLoginHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiAuthLoginHook>>>, {data: BodyType<LoginRequest>}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthLogin(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof postApiAuthLogin>>, TError, {data: BodyType<LoginRequest>}, TContext>(mutationFn, mutationOptions);
    }
    export const useGetApiAuthUserHook = () => {
        const getApiAuthUser = useCustomClient<UserResponse>();

        return (
    
 signal?: AbortSignal
) => {
        return getApiAuthUser(
          {url: `/Api/Auth/User`, method: 'get', signal
    },
          );
        }
      }
    

export const getGetApiAuthUserQueryKey = () => [`/Api/Auth/User`];

    
export type GetApiAuthUserQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiAuthUserHook>>>>
export type GetApiAuthUserQueryError = ErrorType<unknown>

export const useGetApiAuthUser = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiAuthUserHook>>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiAuthUserHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAuthUserQueryKey();

  const getApiAuthUser =  useGetApiAuthUserHook();


  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiAuthUserHook>>>> = ({ signal }) => getApiAuthUser(signal);


  

  const query = useQuery<Awaited<ReturnType<ReturnType<typeof useGetApiAuthUserHook>>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const useDeleteApiAuthLogoutHook = () => {
        const deleteApiAuthLogout = useCustomClient<void>();

        return (
    
 ) => {
        return deleteApiAuthLogout(
          {url: `/Api/Auth/Logout`, method: 'delete'
    },
          );
        }
      }
    


    export type DeleteApiAuthLogoutMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteApiAuthLogoutHook>>>>
    
    export type DeleteApiAuthLogoutMutationError = ErrorType<unknown>

    export const useDeleteApiAuthLogout = <TError = ErrorType<unknown>,
    TVariables = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteApiAuthLogoutHook>>>, TError,TVariables, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      const deleteApiAuthLogout =  useDeleteApiAuthLogoutHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteApiAuthLogoutHook>>>, TVariables> = () => {
          

          return  deleteApiAuthLogout()
        }

        

      return useMutation<Awaited<ReturnType<typeof deleteApiAuthLogout>>, TError, TVariables, TContext>(mutationFn, mutationOptions);
    }
    