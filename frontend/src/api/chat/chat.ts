/**
 * Generated by orval v6.11.0 🍺
 * Do not edit manually.
 * QrTagger
 * OpenAPI spec version: v1
 */
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  IndexChatMessagesResponse
} from '.././model'
import { useCustomClient } from '.././customClient';
import type { ErrorType } from '.././customClient';


export const useGetApiChatTagIdHook = () => {
        const getApiChatTagId = useCustomClient<IndexChatMessagesResponse[]>();

        return (
    tagId: number,
 signal?: AbortSignal
) => {
        return getApiChatTagId(
          {url: `/Api/Chat/${tagId}`, method: 'get', signal
    },
          );
        }
      }
    

export const getGetApiChatTagIdQueryKey = (tagId: number,) => [`/Api/Chat/${tagId}`];

    
export type GetApiChatTagIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiChatTagIdHook>>>>
export type GetApiChatTagIdQueryError = ErrorType<unknown>

export const useGetApiChatTagId = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiChatTagIdHook>>>, TError = ErrorType<unknown>>(
 tagId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiChatTagIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiChatTagIdQueryKey(tagId);

  const getApiChatTagId =  useGetApiChatTagIdHook();


  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiChatTagIdHook>>>> = ({ signal }) => getApiChatTagId(tagId, signal);


  

  const query = useQuery<Awaited<ReturnType<ReturnType<typeof useGetApiChatTagIdHook>>>, TError, TData>(queryKey, queryFn, {enabled: !!(tagId), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const usePostApiChatAuthHook = () => {
        const postApiChatAuth = useCustomClient<void>();

        return (
    
 ) => {
        return postApiChatAuth(
          {url: `/Api/Chat/Auth`, method: 'post'
    },
          );
        }
      }
    


    export type PostApiChatAuthMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiChatAuthHook>>>>
    
    export type PostApiChatAuthMutationError = ErrorType<unknown>

    export const usePostApiChatAuth = <TError = ErrorType<unknown>,
    TVariables = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiChatAuthHook>>>, TError,TVariables, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      const postApiChatAuth =  usePostApiChatAuthHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiChatAuthHook>>>, TVariables> = () => {
          

          return  postApiChatAuth()
        }

        

      return useMutation<Awaited<ReturnType<typeof postApiChatAuth>>, TError, TVariables, TContext>(mutationFn, mutationOptions);
    }
    