/**
 * Generated by orval v6.11.0 🍺
 * Do not edit manually.
 * QrTagger
 * OpenAPI spec version: v1
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  UseMutationOptions,
  MutationFunction
} from '@tanstack/react-query'
import type {
  ProblemDetails,
  ShareLocationRequest
} from '.././model'
import { useCustomClient } from '.././customClient';
import type { ErrorType, BodyType } from '.././customClient';


export const usePostApiLocationTokenHook = () => {
        const postApiLocationToken = useCustomClient<void>();

        return (
    token: string,
    shareLocationRequest: BodyType<ShareLocationRequest>,
 ) => {
        return postApiLocationToken(
          {url: `/Api/Location/${token}`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: shareLocationRequest
    },
          );
        }
      }
    


    export type PostApiLocationTokenMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiLocationTokenHook>>>>
    export type PostApiLocationTokenMutationBody = BodyType<ShareLocationRequest>
    export type PostApiLocationTokenMutationError = ErrorType<ProblemDetails>

    export const usePostApiLocationToken = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiLocationTokenHook>>>, TError,{token: string;data: BodyType<ShareLocationRequest>}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      const postApiLocationToken =  usePostApiLocationTokenHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiLocationTokenHook>>>, {token: string;data: BodyType<ShareLocationRequest>}> = (props) => {
          const {token,data} = props ?? {};

          return  postApiLocationToken(token,data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof postApiLocationToken>>, TError, {token: string;data: BodyType<ShareLocationRequest>}, TContext>(mutationFn, mutationOptions);
    }
    